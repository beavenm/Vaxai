import jsPDF from 'jspdf';
import type { VaccineDesign } from '@shared/schema';

export function generatePDF(design: VaccineDesign) {
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(20);
  doc.text('VaxPredict Pro - Vaccine Design Report', 20, 30);
  
  // Design Info
  doc.setFontSize(16);
  doc.text('Design Information', 20, 50);
  doc.setFontSize(12);
  doc.text(`Name: ${design.name}`, 20, 65);
  doc.text(`Created: ${design.createdAt ? new Date(design.createdAt).toLocaleDateString() : 'N/A'}`, 20, 75);
  doc.text(`Target Population: ${design.targetPopulation || 'Global Population'}`, 20, 85);
  doc.text(`Vaccine Type: ${design.vaccineType || 'Multi-epitope'}`, 20, 95);
  
  // Summary Scores
  doc.setFontSize(16);
  doc.text('Summary Scores', 20, 115);
  doc.setFontSize(12);
  doc.text(`Antigenicity Score: ${design.antigenicityScore ? (design.antigenicityScore * 100).toFixed(1) + '%' : 'N/A'}`, 20, 130);
  doc.text(`Population Coverage: ${design.populationCoverage ? (design.populationCoverage * 100).toFixed(1) + '%' : 'N/A'}`, 20, 140);
  doc.text(`Safety Score: ${design.safetyScore ? (design.safetyScore * 100).toFixed(1) + '%' : 'N/A'}`, 20, 150);
  doc.text(`Number of Epitopes: ${design.epitopeCount || 'N/A'}`, 20, 160);
  
  // Sequence Properties
  doc.setFontSize(16);
  doc.text('Sequence Properties', 20, 180);
  doc.setFontSize(12);
  doc.text(`Length: ${design.sequenceLength || 'N/A'} amino acids`, 20, 195);
  doc.text(`Molecular Weight: ${design.molecularWeight || 'N/A'} kDa`, 20, 205);
  
  // Add new page for sequence
  doc.addPage();
  
  // Optimized Sequence
  doc.setFontSize(16);
  doc.text('Optimized Vaccine Sequence', 20, 30);
  doc.setFontSize(10);
  doc.text(`>${design.name}`, 20, 45);
  
  // Split sequence into lines of 60 characters
  if (design.optimizedSequence) {
    const sequenceLines = [];
    for (let i = 0; i < design.optimizedSequence.length; i += 60) {
      sequenceLines.push(design.optimizedSequence.slice(i, i + 60));
    }
    
    let yPos = 55;
    for (const line of sequenceLines) {
      doc.text(line, 20, yPos);
      yPos += 10;
      if (yPos > 280) {
        doc.addPage();
        yPos = 30;
      }
    }
  }
  
  // Epitope Table
  if (design.epitopes && Array.isArray(design.epitopes) && design.epitopes.length > 0) {
    doc.addPage();
    doc.setFontSize(16);
    doc.text('Selected Epitopes', 20, 30);
    
    doc.setFontSize(10);
    let yPos = 50;
    
    // Table header
    doc.text('Epitope', 20, yPos);
    doc.text('Type', 70, yPos);
    doc.text('HLA Alleles', 100, yPos);
    doc.text('Score', 160, yPos);
    yPos += 10;
    
    // Table rows
    for (const epitope of design.epitopes as any[]) {
      if (yPos > 280) {
        doc.addPage();
        yPos = 30;
      }
      
      doc.text(epitope.sequence, 20, yPos);
      doc.text(epitope.type, 70, yPos);
      doc.text(epitope.hlaAlleles.slice(0, 2).join(', '), 100, yPos);
      doc.text(epitope.score.toString(), 160, yPos);
      yPos += 10;
    }
  }
  
  // Safety Assessment
  let yPos = 50;
  if (design.safetyAssessment) {
    doc.addPage();
    doc.setFontSize(16);
    doc.text('Safety Assessment', 20, 30);
    
    doc.setFontSize(12);
    yPos = 50;
    
    for (const [key, value] of Object.entries(design.safetyAssessment)) {
      doc.text(`${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}`, 20, yPos);
      yPos += 15;
    }
  }
  
  // Population Breakdown
  if (design.populationBreakdown) {
    if (!design.safetyAssessment) {
      doc.addPage();
      yPos = 30;
    }
    doc.setFontSize(16);
    doc.text('Population Coverage Breakdown', 20, yPos + 20);
    
    doc.setFontSize(12);
    yPos += 40;
    
    for (const [region, coverage] of Object.entries(design.populationBreakdown)) {
      doc.text(`${region}: ${(coverage * 100).toFixed(1)}%`, 20, yPos);
      yPos += 15;
    }
  }
  
  // Footer
  doc.setFontSize(8);
  doc.text('Generated by VaxPredict Pro - AI-Powered Vaccine Design Platform', 20, 285);
  
  // Save the PDF
  doc.save(`${design.name}_vaccine_report.pdf`);
}
